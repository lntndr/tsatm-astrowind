---
import type { Content as Props } from '~/types';
import Headline from '../ui/Headline.astro';
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import ItemGrid from '../ui/ItemGrid.astro';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  callToAction,
  items = [],
  columns,
  image = await Astro.slots.render('image'),
  images = [],
  isReversed = false,
  isAfterContent = false,
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

// Use images array if provided, otherwise fall back to single image
const displayImages = images.length > 0 ? images : (image ? [image] : []);
const imageCount = displayImages.length;

// Throw exception if only one image is provided to multi-image component
if (imageCount === 1) {
  throw new Error('ContentMultiImage component should not be used with a single image. Use the regular Content component instead.');
}

// Layout classes based on your ASCII patterns - simplified!
const getImageLayoutClasses = (count: number, index: number) => {
  const basePadding = 'p-1';
  
  // Mobile: only show even-indexed images (0, 2, 4, 6...) and always full width
  const mobileClasses = `${(index % 2 === 0) ? 'block' : 'hidden md:block'} w-full ${basePadding}`;
  
  if (count === 2) {
    // Special case: 2 images = O/O (both full width)
    return `${mobileClasses} md:w-full`;
  }
  
  // For 3+ images: use the elegant pattern
  if (count % 2 === 1) {
    // Odd count: O/oo pattern (first image full, rest half)
    if (index === 0) return `${mobileClasses} md:w-full`;
    return `${mobileClasses} md:w-1/2`;
  } else {
    // Even count: oo/oo pattern (all images half width)
    return `${mobileClasses} md:w-1/2`;
  }
};

// Container classes remain simple
const getContainerClasses = (count: number) => {
  return 'flex flex-col md:flex-row md:flex-wrap';
};
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-7xl mx-auto ${isAfterContent ? 'pt-0 md:pt-0 lg:pt-0' : ''} ${classes?.container ?? ''}`}
  bg={bg}
>
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: 'max-w-xl sm:mx-auto lg:max-w-2xl',
      title: 'text-4xl md:text-5xl font-bold tracking-tighter mb-4 font-heading',
      subtitle: 'max-w-3xl mx-auto sm:text-center text-xl text-muted dark:text-slate-400',
    }}
  />
  <div class="mx-auto max-w-7xl p-4 md:px-8">
    <div class={`md:grid md:grid-cols-2 md:gap-16 ${isReversed ? 'md:[&>*:first-child]:order-2' : ''}`}>
      <div class="md:basis-1/2 self-start">
        {content && <div class="mb-12 text-xl dark:text-slate-400 font-serif leading-6" set:html={content} />}

        {
          callToAction && (
            <div class="mt-[-40px] mb-8 text-primary">
              <Button variant="link" {...callToAction} />
            </div>
          )
        }

        <ItemGrid
          items={items}
          columns={columns}
          defaultIcon="tabler:check"
          classes={{
            container: `gap-y-4 md:gap-y-8`,
            panel: 'max-w-none',
            title: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
            description: 'hidden',
            icon: 'hidden',
            action: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
          }}
        />
      </div>
      <div aria-hidden="true" class="mt-10 md:mt-0 md:basis-1/2 self-start">
        {displayImages.length > 0 && (
          <div class="max-w-4xl w-full">
            <div class={getContainerClasses(imageCount)}>
              {displayImages.map((currentImage, index) => (
                <div class={getImageLayoutClasses(imageCount, index)}>
                  {typeof currentImage === 'string' ? (
                    <Fragment set:html={currentImage} />
                  ) : (
                    <Image
                      class="w-full h-auto"
                      widths={[400, 768, 1200]} // Add larger size
                      sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 432px"
                      layout="contained"
                      quality={85} // Add explicit quality (default is often 80)
                      format="webp" // Ensure modern format
                      {...currentImage}
                    />
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  </div>
</WidgetWrapper>