---
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  videoSrc,
  poster,
  id,
  anchorId, // Change from anchorLink to anchorId
  videoSpeed = 1, // Add this line with a default value of 1
} = Astro.props;
---

<section class="relative h-screen w-full overflow-hidden not-prose" {...id ? { id } : {}}>
  <img 
    src={poster}
    alt="Background"
    class="absolute top-0 left-0 w-full h-full object-cover"
    loading="eager"
  />
  
  <div id="video-container" class="absolute top-0 left-0 w-full h-full hidden md:block">
    <!-- Video will be inserted here for non-mobile devices -->
  </div>

  <!-- Content Overlay -->
  <div class="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
    <div class="text-center max-w-5xl mx-auto px-4 sm:px-6">
      {tagline && (
        <p
          class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase"
          set:html={tagline}
        />
      )}
      {title && (
        <h1
          class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading text-white"
          set:html={title}
        />
      )}
      <div class="max-w-3xl mx-auto">
        {subtitle && <p class="text-xl text-white mb-6" set:html={subtitle} />}
        {actions && (
          <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 mb-8">
            {Array.isArray(actions) ? (
              actions.map((action) => (
                <div class="flex w-full sm:w-auto">
                  <Button {...(action || {})} class="w-full sm:mb-0" />
                </div>
              ))
            ) : (
              <Fragment set:html={actions} />
            )}
          </div>
        )}
        {anchorId && (
          <div class="mt-12 flex justify-center">
            <a href={`#${anchorId}`} class="js-scroll bg-transparent hover:bg-white/10 text-white rounded-full p-3 transition-all duration-300 transform hover:translate-y-1 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-white/50">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M16.707 10.293a1 1 0 010 1.414l-6 6a1 1 0 01-1.414 0l-6-6a1 1 0 111.414-1.414L9 14.586V3a1 1 0 012 0v11.586l4.293-4.293a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
            </a>
          </div>
        )}
      </div>
      {content && <Fragment set:html={content} />}
    </div>
  </div>
</section>

<script define:vars={{ videoSrc, poster, videoSpeed }}>
  function handleIntersection(entries) {
    entries.forEach(entry => {
      const video = entry.target.querySelector('video');
      if (video) {
        if (entry.isIntersecting) {
          video.play().catch(e => console.error("Error playing video:", e));
        } else {
          video.pause();
        }
      }
    });
  }

  function initVideo() {
    const videoContainer = document.getElementById('video-container');
    if (videoContainer) {  
      //&& window.innerWidth >= 768) for excluding mobile
      const video = document.createElement('video');
      video.autoplay = true;
      video.loop = true;
      video.muted = true;
      video.playsInline = true;
      video.poster = poster; 
      video.className = 'absolute top-0 left-0 w-full h-full object-cover';

      // Set playbackRate immediately
      video.playbackRate = videoSpeed;

      const source1 = document.createElement('source');
      source1.src = videoSrc; 
      source1.type = 'video/mp4';
      video.appendChild(source1);

      const source2 = document.createElement('source');
      source2.src = videoSrc.replace('.mp4', '.webm'); 
      source2.type = 'video/webm';
      video.appendChild(source2);

      video.addEventListener('loadedmetadata', () => {
        // Set playbackRate again after video has loaded
        video.playbackRate = videoSpeed;
      });

      videoContainer.appendChild(video);

      // Set up Intersection Observer
      const observer = new IntersectionObserver(handleIntersection, {
        threshold: 0.5 // Trigger when 50% of the video is visible
      });
      observer.observe(videoContainer);
    }
  }

  // Run initVideo when the DOM is fully loaded
  document.addEventListener('DOMContentLoaded', initVideo);
  document.addEventListener('DOMContentLoaded', () => {
    const scrollLinks = document.querySelectorAll('.js-scroll');
    scrollLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href').slice(1);
        const targetElement = document.getElementById(targetId);
        if (targetElement) {
          targetElement.scrollIntoView({ behavior: 'smooth' });
        }
      });
    });
  });
</script> 