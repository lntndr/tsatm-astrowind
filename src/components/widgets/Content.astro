---
import type { Content as Props } from '~/types';
import Headline from '../ui/Headline.astro';
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import ItemGrid from '../ui/ItemGrid.astro';
import { twMerge } from 'tailwind-merge';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  callToAction,
  items = [],
  columns,
  image = await Astro.slots.render('image'),
  imageOverlayText,
  imageOverlayX,
  imageOverlayY,
  isReversed = false,
  isAfterContent = false,
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
  imageCredit,
} = Astro.props;

---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-7xl mx-auto ${isAfterContent ? 'pt-0 md:pt-0 lg:pt-0' : ''} ${classes?.container ?? ''}`}
  bg={bg}
>
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: 'max-w-xl sm:mx-auto lg:max-w-2xl',
      title: 'text-4xl md:text-5xl font-bold tracking-tighter mb-4 font-heading',
      subtitle: 'max-w-3xl mx-auto sm:text-center text-xl text-muted dark:text-slate-400',
    }}
  />
  <div class="mx-auto max-w-7xl p-4 md:px-8">
    <div class={`md:flex ${isReversed ? 'md:flex-row-reverse' : ''} md:gap-16`}>
      <div class="md:basis-1/2 self-start">
        {content && <div class="mb-12 text-xl dark:text-slate-400 font-serif leading-6" set:html={content} />}

        {
          callToAction && (
            <div class="mt-[-40px] mb-8 text-primary">
              <Button variant="link" {...callToAction} />
            </div>
          )
        }

        <ItemGrid
          items={items}
          columns={columns}
          defaultIcon="tabler:check"
          classes={{
            container: `gap-y-4 md:gap-y-8`,
            panel: 'max-w-none',
            title: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
            description: 'hidden',
            icon: 'hidden',
            action: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
          }}
        />
      </div>
      <div aria-hidden="true" class="mt-10 md:mt-0 md:basis-1/2 self-start">
        {image && (
          <div class="max-w-4xl">
            {typeof image === 'string' ? (
              <Fragment set:html={image} />
            ) : (
              <div class="flex flex-col items-start">
                <div class="relative w-full">
                  <Image
                    class="w-full"
                    widths={[400, 768]}
                    sizes="(max-width: 768px) 100vw, 432px"
                    layout="contained"
                    {...image}
                  />
                  {imageOverlayText && (
                    <div 
                      class={twMerge(
                        'absolute inset-0',
                        classes.imageOverlay
                      )}
                    >
                      <p 
                        class={twMerge('absolute text-white text-2xl font-bold', classes.imageOverlayText)}
                        style={{
                          left: imageOverlayX || '50%',
                          top: imageOverlayY || '50%',
                          transform: `translate(${imageOverlayX ? '0' : '-50%'}, ${imageOverlayY ? '0' : '-50%'})`,
                        }}
                      >
                        {imageOverlayText}
                      </p>
                    </div>
                  )}
                </div>
                {imageCredit && (
                  <p class={twMerge('text-sm text-gray-600 mt-2 w-full text-center md:text-left',
                    isReversed ? 'md:text-right' : '',
                    classes.imageCredit)}>
                    {imageCredit}
                  </p>
                )}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  </div>
</WidgetWrapper>


