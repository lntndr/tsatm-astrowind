---
import Button from '~/components/ui/Button.astro';
import { Image } from 'astro:assets';
import type { Hero as Props } from '~/types';

export interface SlideHeroProps extends Props {
  slideshow?: {
    images?: Array<{ filename: string; alt?: string }>;
    folder?: string;
    duration?: number;
  };
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  id,
  anchorId,
  slideshow = { folder: 'slideshow', duration: 3000 },
} = Astro.props as SlideHeroProps;

const slideshowImages = slideshow.images;
const slideshowFolder = slideshow.folder || 'slideshow';
const imageDuration = slideshow.duration || 3000;

const imageModules = import.meta.glob('/src/assets/images/**/*.{jpg,jpeg,png,webp,JPG,JPEG,PNG,WEBP}', { eager: false });

let processedImages = [];

if (slideshowImages) {
  for (const config of slideshowImages) {
    const imagePath = `/src/assets/images/${slideshowFolder}/${config.filename}`;
    const imageModule = imageModules[imagePath];
    
    if (imageModule) {
      try {
        const { default: imageImport } = await imageModule();
        processedImages.push({
          src: imageImport,
          alt: config.alt || 'Slideshow image',
          filename: config.filename
        });
      } catch (error) {
        // Silent error handling
      }
    }
  }
} else {
  const folderPattern = `/src/assets/images/${slideshowFolder}/`;
  const imagePaths = Object.keys(imageModules)
    .filter(path => path.startsWith(folderPattern))
    .sort((a, b) => {
      const filenameA = a.split('/').pop();
      const filenameB = b.split('/').pop();
      return filenameA.localeCompare(filenameB, undefined, { numeric: true });
    });
  
  for (const imagePath of imagePaths) {
    const imageModule = imageModules[imagePath];
    try {
      const { default: imageImport } = await imageModule();
      const filename = imagePath.split('/').pop();
      
      processedImages.push({
        src: imageImport,
        alt: `Slideshow image: ${filename}`,
        filename
      });
    } catch (error) {
      // Silent error handling
    }
  }
}

const validImages = processedImages.filter(Boolean);
const optimizedImageSources = validImages.map(img => img?.src?.src).filter(Boolean);
const imageWidths = [400, 768, 1024, 2040];
const imageSizes = "(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px";
---

<section class="relative w-full overflow-hidden not-prose select-none" id="slide-hero-section" {...id ? { id } : {}}>
  <!-- Preload first few images -->
  {validImages.slice(0, 5).map(img => (
    <link rel="preload" as="image" href={img.src.src} />
  ))}

  <div id="slideshow-container" class="absolute top-0 left-0 w-full h-full">
    <!-- Layer 1: Eager loaded -->
    <div id="slideshow-layer-1" class="absolute top-0 left-0 w-full h-full" style="z-index: 2;">
      {validImages.map((img, index) => (
        <Image
          src={img.src}
          alt={img.alt}
          class={`absolute top-0 left-0 w-full h-full object-cover slideshow-image layer-1-image ${index === 0 ? 'active' : ''}`}
          loading="eager"
          widths={imageWidths}
          sizes={imageSizes}
          format="webp"
          style={index === 0 ? 'display: block;' : 'display: none;'}
          data-slide-index={index}
        />
      ))}
    </div>
    
    <!-- Layer 2: Lazy loaded -->
    <div id="slideshow-layer-2" class="absolute top-0 left-0 w-full h-full" style="z-index: 1;">
      {validImages.map((img, index) => (
        <Image
          src={img.src}
          alt={img.alt}
          class="absolute top-0 left-0 w-full h-full object-cover slideshow-image layer-2-image"
          loading="lazy"
          widths={imageWidths}
          sizes={imageSizes}
          format="webp"
          style="display: none;"
          data-slide-index={index}
        />
      ))}
    </div>
  </div>

  <!-- Content Overlay -->
  <div class="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center" style="z-index: 10;">
    <div class="text-center max-w-5xl mx-auto px-4 sm:px-6">
      {tagline && (
        <p
          class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase"
          set:html={tagline}
        />
      )}
      {title && (
        <h1
          class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading text-white"
          set:html={title}
        />
      )}
      <div class="max-w-3xl mx-auto">
        {subtitle && <p class="text-xl text-white mb-6" set:html={subtitle} />}
        {actions && (
          <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 mb-8">
            {Array.isArray(actions) ? (
              actions.map((action) => (
                <div class="flex w-full sm:w-auto">
                  <Button {...(action || {})} class="w-full sm:mb-0" />
                </div>
              ))
            ) : (
              <Fragment set:html={actions} />
            )}
          </div>
        )}
        {anchorId && (
          <div class="mt-12 flex justify-center">
            <a href={`#${anchorId}`} class="js-scroll bg-transparent hover:bg-white/10 text-white rounded-full p-3 transition-all duration-300 transform hover:translate-y-1 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-white/50">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M16.707 10.293a1 1 0 010 1.414l-6 6a1 1 0 01-1.414 0l-6-6a1 1 0 111.414-1.414L9 14.586V3a1 1 0 012 0v11.586l4.293-4.293a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
            </a>
          </div>
        )}
      </div>
      {content && <Fragment set:html={content} />}
    </div>
  </div>
</section>

<style>
  .slideshow-image {
    transform: translateZ(0);
    will-change: display;
  }
  
  .slideshow-image.active {
    display: block !important;
  }
</style>

<script define:vars={{ optimizedImageSources, imageDuration }}>
  let currentImageIndex = 0;
  let slideshowInterval;
  let hasStarted = false;
  let activeLayer = 1;
  let layer2Loaded = false;

  function waitForLayer1Images() {
    const layer1Images = document.querySelectorAll('.layer-1-image');
    if (layer1Images.length === 0) return;

    let loadedCount = 0;
    const totalImages = layer1Images.length;
    const promises = [];

    layer1Images.forEach(function(img) {
      if (img.complete && img.naturalWidth > 0) {
        loadedCount++;
      } else {
        const promise = new Promise(function(resolve) {
          img.addEventListener('load', function() {
            loadedCount++;
            resolve();
          });
          img.addEventListener('error', resolve);
        });
        promises.push(promise);
      }
    });

    if (promises.length === 0) {
      startSlideshowWhenReady();
    } else {
      Promise.all(promises).then(startSlideshowWhenReady);
    }
  }

  function loadLayer2Images() {
    if (layer2Loaded) return;
    
    const layer2Images = document.querySelectorAll('.layer-2-image');
    layer2Images.forEach(function(img) {
      img.loading = 'eager';
    });
    layer2Loaded = true;
  }

  function startSlideshowWhenReady() {
    if (hasStarted) return;
    
    hasStarted = true;
    
    if (optimizedImageSources.length > 1) {
      setTimeout(loadLayer2Images, 100);
      scheduleNextTransition();
    }
  }

  function scheduleNextTransition() {
    if (optimizedImageSources.length > 1) {
      slideshowInterval = setTimeout(function() {
        nextImage();
        scheduleNextTransition();
      }, imageDuration);
    }
  }

  function nextImage() {
    const nextImageIndex = (currentImageIndex + 1) % optimizedImageSources.length;
    
    const currentLayerClass = activeLayer === 1 ? '.layer-1-image' : '.layer-2-image';
    const nextLayerClass = activeLayer === 1 ? '.layer-2-image' : '.layer-1-image';
    const currentLayer = activeLayer === 1 ? document.getElementById('slideshow-layer-1') : document.getElementById('slideshow-layer-2');
    const nextLayer = activeLayer === 1 ? document.getElementById('slideshow-layer-2') : document.getElementById('slideshow-layer-1');
    
    const nextLayerImages = document.querySelectorAll(nextLayerClass);
    nextLayerImages.forEach(function(img) {
      img.style.display = 'none';
      img.classList.remove('active');
    });
    
    const nextImage = document.querySelector(nextLayerClass + '[data-slide-index="' + nextImageIndex + '"]');
    if (nextImage) {
      nextImage.style.display = 'block';
      nextImage.classList.add('active');
    }
    
    if (activeLayer === 1) {
      nextLayer.style.zIndex = '3';
      currentLayer.style.zIndex = '2';
      activeLayer = 2;
    } else {
      nextLayer.style.zIndex = '2';
      currentLayer.style.zIndex = '1';
      activeLayer = 1;
    }
    
    currentImageIndex = nextImageIndex;
  }

  function adjustHeroHeight() {
    const header = document.querySelector('header');
    const heroSection = document.getElementById('slide-hero-section');
    
    if (header && heroSection) {
      const headerHeight = header.offsetHeight;
      heroSection.style.height = 'calc(100vh - ' + headerHeight + 'px)';
    }
  }

  function initSlideshow() {
    waitForLayer1Images();
    adjustHeroHeight();
  }

  document.addEventListener('DOMContentLoaded', initSlideshow);
</script>