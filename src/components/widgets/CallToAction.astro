---
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import type { CallToAction, Widget } from '~/types';
import Headline from '~/components/ui/Headline.astro';
import Button from '~/components/ui/Button.astro';

interface Props extends Widget {
  title?: string;
  subtitle?: string;
  tagline?: string;
  callToAction?: CallToAction;
  actions?: string | CallToAction[];
}

const {
  title,
  subtitle,
  tagline,
  actions,
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

// Only fall back to slots if props are not provided
const finalTitle = title || await Astro.slots.render('title');
const finalSubtitle = subtitle || await Astro.slots.render('subtitle');
const finalTagline = tagline || await Astro.slots.render('tagline');
const finalActions = actions || await Astro.slots.render('actions');
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto !pt-0 pb-8 ${classes?.container ?? ''}`} bg={bg}>
  <div
    class="max-w-3xl mx-auto text-center px-6 pb-6 pt-0 rounded-md shadow-xl dark:shadow-none dark:border dark:border-slate-600"
  >
    <Headline
      title={finalTitle}
      subtitle={finalSubtitle}
      tagline={finalTagline}
      classes={{
        container: 'mb-0 md:mb-0',
        title: 'text-4xl md:text-4xl font-bold tracking-tighter mb-4 font-heading',
        subtitle: 'mt-4 font-serif text-xl text-muted dark:text-slate-400 space-y-4',
      }}
    />
    {
      finalActions && (
        <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 mt-6">
          {Array.isArray(finalActions) ? (
            finalActions.map((action) => (
              <div class="flex w-full sm:w-auto">
                <Button {...(action || {})} class="w-full sm:mb-0" />
              </div>
            ))
          ) : (
            <Fragment set:html={finalActions} />
          )}
        </div>
      )
    }
  </div>
</WidgetWrapper>