---
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Button from '~/components/ui/Button.astro';
import Image from '~/components/common/Image.astro';
import type { Testimonials as Props } from '~/types';

const {
  title = '',
  subtitle = '',
  tagline = '',
  testimonials = [],
  callToAction,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />

  <div class="grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
    {
      testimonials &&
        testimonials.map(({ title, testimonial, name, job, image }) => (
          <div class="flex flex-col h-full border-black border dark:shadow-none dark:border dark:border-slate-600 overflow-hidden">
            {image && (
              <div class="aspect-square w-full relative border-black border-b overflow-hidden">
                <div class="absolute inset-0 flex items-center justify-center">
                  {typeof image === 'string' ? (
                    <div set:html={image} class="max-w-full max-h-full object-contain" />
                  ) : (
                    <Image
                      class="max-w-full max-h-full"
                      widths={[400, 768]}
                      width={768}
                      height={768}
                      objectFit='contain'
                      {...image}
                    />
                  )}
                </div>
              </div>
            )}
            <div class="p-4 md:p-6 flex-grow">
              <div> 
                {title && <p class="text-xs text-secondary dark:text-blue-200 font-bold tracking-wide uppercase">{title}</p>}
                {name && <h3 class="text-lg font-semibold">{name}</h3>}
                {job && <p class="text-xs text-muted">{job}</p>}
              </div>
              <hr class="border-slate-200 dark:border-slate-600 my-4" />
              {testimonial && (
                <p class="text-muted">" {testimonial} "</p>
              )}
            </div>
          </div>
        ))
    }
  </div>
  {
    callToAction && (
      <div class="flex justify-center mx-auto w-fit mt-8 md:mt-12 font-medium">
        <Button {...callToAction} />
      </div>
    )
  }
</WidgetWrapper>

