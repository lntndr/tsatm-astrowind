---
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Button from '~/components/ui/Button.astro';
import Image from '~/components/common/Image.astro';
import type { Testimonials as Props } from '~/types';

const {
  title = '',
  subtitle = '',
  tagline = '',
  testimonials = [],
  callToAction,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />

  <div class="grid gap-6">
    {testimonials && testimonials.length > 0 && (
      <div class="col-span-full p-4 md:p-6 rounded-md shadow-xl dark:shadow-none dark:border dark:border-slate-600">
        <div class="md:flex md:items-center">
          {testimonials[0].image && (
            <div class="md:w-1/3 aspect-square relative overflow-hidden mb-4 md:mb-0 md:mr-6 rounded-md">
              <div class="absolute inset-0 flex items-center justify-center">
                {typeof testimonials[0].image === 'string' ? (
                  <div set:html={testimonials[0].image} class="max-w-full max-h-full object-cover" />
                ) : (
                  <Image
                    class="max-w-full max-h-full"
                    widths={[400, 768]}
                    width={768}
                    height={768}
                    objectFit='cover'
                    objectPosition='center'
                    {...testimonials[0].image}
                  />
                )}
              </div>
            </div>
          )}
          <div class="md:w-2/3 p-4 md:p-0">
            <div> 
              {testimonials[0].title && <p class="text-sm text-primary dark:text-blue-200 font-bold tracking-wide uppercase" set:html={testimonials[0].title.replace(/;/g, ' <span class="text-lg opacity-40">|</span> ')}></p>}
              {testimonials[0].name && <h3 class="text-xl font-semibold -mt-2">{testimonials[0].name}</h3>}
              {testimonials[0].job && <p class="text-sm text-muted">{testimonials[0].job}</p>}
            </div>
            <hr class="border-slate-200 dark:border-slate-600 my-4 -mx-4 md:mx-0" />
            {testimonials[0].testimonial && (
              <p class="font-serif text-lg leading-snug -mx-4 md:mx-0">{testimonials[0].testimonial}</p>
            )}
          </div>
        </div>
      </div>
    )}

    <div class="flex flex-wrap gap-6 justify-center">
      {testimonials && testimonials.slice(1).map(({ title, testimonial, name, job, image}) => (
        <div class="flex flex-col p-4 md:p-6 rounded-md shadow-xl dark:shadow-none dark:border dark:border-slate-600 w-full sm:w-[calc(50%-0.75rem)] lg:w-[calc(33.333%-1rem)]">
          {image && (
            <div class="aspect-square w-full relative overflow-hidden rounded-md">
              <div class="absolute inset-0 flex items-center justify-center">
                {typeof image === 'string' ? (
                  <div set:html={image} class="max-w-full max-h-full object-cover" />
                ) : (
                  <Image
                    class="max-w-full max-h-full"
                    widths={[400, 768]}
                    width={768}
                    height={768}
                    objectFit='cover'
                    objectPosition='top'
                    {...image}
                  />
                )}
              </div>
            </div>
          )}
          <div class="p-4 md:p-6 flex-grow">
            <div> 
              {title && <p class="text-sm text-primary dark:text-blue-200 font-bold tracking-wide uppercase" set:html={title.replace(/;/g, ' <span class="text-lg opacity-40">|</span> ')}></p>}
              {name && <h3 class="text-xl font-semibold -mt-2">{name}</h3>}
              {job && <p class="text-sm text-muted">{job}</p>}
            </div>
            <hr class="border-slate-200 dark:border-slate-600 my-4 -mx-4 md:-mx-6" />
            {testimonial && (
              <p class="font-serif text-lg leading-snug -mx-4 md:-mx-6">{testimonial}</p>
            )}
          </div>
        </div>
      ))}
    </div>
  </div>

  {callToAction && (
    <div class="flex justify-center mx-auto w-fit mt-8 md:mt-12 font-medium">
      <Button {...callToAction} />
    </div>
  )}
</WidgetWrapper>
